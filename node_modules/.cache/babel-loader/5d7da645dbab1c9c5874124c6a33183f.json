{"ast":null,"code":"import _objectSpread from \"/Users/athom/Desktop/codingProjects/theJackProject/jackFront/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/athom/Desktop/codingProjects/theJackProject/jackFront/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/athom/Desktop/codingProjects/theJackProject/jackFront/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport decode from 'jwt-decode';\n\nvar AuthService =\n/*#__PURE__*/\nfunction () {\n  function AuthService(domain) {\n    var _this = this;\n\n    _classCallCheck(this, AuthService);\n\n    this.sign_in = function (credentials) {\n      return _this.authFetch(\"\".concat(_this.domain, \"/users/sign_in\"), {\n        method: \"POST\",\n        body: JSON.stringify(credentials)\n      }).then(function (statusResponse) {\n        var token = statusResponse.headers.get('Authorization'); // set a JWT token in local storage, taken out of response from API\n\n        console.log(token);\n\n        _this.setToken(token); //return json from response\n\n\n        return statusResponse.json();\n      });\n    };\n\n    this.register = function (user) {\n      console.log('register method:', user);\n      return _this.authFetch(\"\".concat(_this.domain, \"/users\"), {\n        method: \"POST\",\n        body: JSON.stringify(user)\n      }).then(function (statusResponse) {\n        var token = statusResponse.headers.get('Authorization'); // set a JWT token in local storage, taken out of response from API\n\n        console.log(token);\n\n        _this.setToken(token); //return json from response\n\n\n        return statusResponse.json();\n      });\n    };\n\n    this.getUserId = function () {\n      var tmpToken = _this.getToken();\n\n      if (tmpToken !== null && tmpToken !== undefined && tmpToken.length > 0) {\n        var token = decode(_this.getToken());\n        return token.sub;\n      } else {\n        return null;\n      }\n    };\n\n    this.authFetch = function (url, options) {\n      var headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      };\n\n      if (_this.loggedIn()) {\n        headers['Authorization'] = 'Bearer ' + _this.getToken();\n      }\n\n      return fetch(url, _objectSpread({\n        headers: headers\n      }, options)).then(function (apiResponse) {\n        return _this._checkStatus(apiResponse);\n      }).catch(function (err) {\n        console.log(\"::: FETCH ERROR CAUGHT:::\", err);\n        return err;\n      });\n    };\n\n    this.domain = process.env.REACT_APP_API_URL;\n  }\n\n  _createClass(AuthService, [{\n    key: \"loggedIn\",\n    value: function loggedIn() {\n      var token = this.getToken();\n      return !!token && !this.isTokenExpired(token);\n    }\n  }, {\n    key: \"isTokenExpired\",\n    value: function isTokenExpired(token) {\n      try {\n        var decoded = decode(token);\n\n        if (decoded.exp < Date.now() / 1000) {\n          return true;\n        } else {\n          return false;\n        }\n      } catch (err) {\n        return false;\n      }\n    } // The token is stored in the browser\n\n  }, {\n    key: \"setToken\",\n    value: function setToken(token) {\n      console.log(\"THIS IS THE TOKEN FROM SSET TOKEN\", token);\n      var parsedToken;\n\n      if (token === null) {\n        console.log(\"No token available.\");\n      } else {\n        parsedToken = token.split(' ')[1];\n        console.log(\"THIS IS THE PARSED TOKEN\", parsedToken);\n        localStorage.setItem('id_token', parsedToken);\n      }\n    } // Fetch the token from local storage\n\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      return localStorage.getItem('id_token');\n    } // Removes the token\n\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      localStorage.removeItem('id_token');\n    }\n  }, {\n    key: \"_checkStatus\",\n    value: function _checkStatus(response) {\n      // console log message on whether or not the http response shows success\n      // if in a real application, this would be handled more extensively\n      if (response.status >= 200 && response.status < 300) {\n        console.log(\":::SUCCESS:::\");\n      } else {\n        console.log(\":::ERROR:::\", response);\n      } // we just return the whole response either way...\n\n\n      return response;\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport { AuthService as default };","map":{"version":3,"sources":["/Users/athom/Desktop/codingProjects/theJackProject/jackFront/src/services/index.js"],"names":["decode","AuthService","domain","sign_in","credentials","authFetch","method","body","JSON","stringify","then","statusResponse","token","headers","get","console","log","setToken","json","register","user","getUserId","tmpToken","getToken","undefined","length","sub","url","options","loggedIn","fetch","apiResponse","_checkStatus","catch","err","process","env","REACT_APP_API_URL","isTokenExpired","decoded","exp","Date","now","parsedToken","split","localStorage","setItem","getItem","removeItem","response","status"],"mappings":"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","sourcesContent":["import decode from 'jwt-decode'\n\nexport default class AuthService {\n\tconstructor(domain) {\n\t\tthis.domain = process.env.REACT_APP_API_URL\n\t}\n\n\tsign_in = (credentials) => {\n\t\treturn this.authFetch(`${this.domain}/users/sign_in`, {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: JSON.stringify(credentials),\n\t\t})\n\t\t.then(statusResponse => {\n\t\t\tlet token = statusResponse.headers.get('Authorization')\n\t\t\t// set a JWT token in local storage, taken out of response from API\n\t\t\tconsole.log(token);\n\t\t\tthis.setToken(token)\n\t\t\t//return json from response\n\t\t\treturn statusResponse.json()\n\t\t})\n\t}\n\n\tregister = (user) => {\n\t\tconsole.log('register method:', user)\n\t\treturn this.authFetch(`${this.domain}/users`, {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: JSON.stringify(user),\n\t\t})\n\t\t.then(statusResponse => {\n\t\t\tlet token = statusResponse.headers.get('Authorization')\n\t\t\t// set a JWT token in local storage, taken out of response from API\n\t\t\tconsole.log(token);\n\t\t\tthis.setToken(token)\n\t\t\t//return json from response\n\t\t\treturn statusResponse.json()\n\t\t})\n\t}\n\n\tloggedIn() {\n\t\tconst token = this.getToken()\n\t\treturn !!token && !this.isTokenExpired(token)\n\t}\n\n\tisTokenExpired(token) {\n\t\ttry {\n\t\t\tconst decoded = decode(token)\n\t\t\tif (decoded.exp < Date.now() / 1000) {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\tcatch (err) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// The token is stored in the browser\n\tsetToken(token) {\n\t\tconsole.log(\"THIS IS THE TOKEN FROM SSET TOKEN\", token);\n    let parsedToken\n    if(token===null){\n      console.log(\"No token available.\");\n    }else{\n  \t\tparsedToken = token.split(' ')[1]\n\t\t\tconsole.log(\"THIS IS THE PARSED TOKEN\", parsedToken);\n  \t\tlocalStorage.setItem('id_token', parsedToken)\n    }\n\t}\n\n\t// Fetch the token from local storage\n\tgetToken() {\n\t\treturn localStorage.getItem('id_token')\n\t}\n\n\t// Removes the token\n\tlogout() {\n\t\tlocalStorage.removeItem('id_token');\n\t}\n\n\tgetUserId = () => {\n\t\tlet tmpToken = this.getToken()\n\t\tif(tmpToken !== null && tmpToken !== undefined && tmpToken.length > 0){\n\t\t\tconst token = decode(this.getToken());\n\t\t\treturn token.sub\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n\n\tauthFetch = (url, options) => {\n\t\tconst headers = {\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\n\t\tif (this.loggedIn()) {\n\t\t\theaders['Authorization'] = 'Bearer ' + this.getToken()\n\t\t}\n\n\t\treturn fetch(url, {\n\t\t\theaders,\n\t\t\t...options\n\t\t})\n\t\t.then(apiResponse => this._checkStatus(apiResponse))\n\t\t.catch(err => {\n\t\t\tconsole.log(\"::: FETCH ERROR CAUGHT:::\", err)\n\t\t\treturn err\n\t\t})\n\t}\n\n\t_checkStatus(response) {\n\t\t// console log message on whether or not the http response shows success\n\t\t// if in a real application, this would be handled more extensively\n\t\tif(response.status >= 200 && response.status < 300) {\n\t\t\tconsole.log(\":::SUCCESS:::\");\n\t\t} else {\n\t\t\tconsole.log(\":::ERROR:::\", response)\n\t\t}\n\t\t// we just return the whole response either way...\n\t\treturn response\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}